##  Palindrome Linked List

******************REVERSING APPROACH***************************
/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    bool isPalindrome(ListNode* head) {
        int n=size(head);
        /* if(n<=1){
            return true;
        } */
        int m;
        if(n%2==0){
            m=n/2;
        }
        else{
            m=(n+1)/2;
        }
        ListNode*temp=head;
        for(int i=0;i<m;i++){
            temp=temp->next;
        }
        temp=reverse(temp);
        while(temp){
            if(head->val!=temp->val){
                return false;
            }
            temp=temp->next;
            head=head->next;
        }
        return true;
    }

    ListNode* reverse(ListNode* head){
        if(!head || head->next==NULL){
            return head;
        }
        ListNode* temp=reverse(head->next);
        head->next->next=head;
        head->next=NULL;
        return temp;
    }

    int size(ListNode* head){
        if(!head){
            return 0;
        }
        return size(head->next)+1;
    }
};


********************* STACK APPROACH **********************
class Solution {
public:
    bool isPalindrome(ListNode* head) {
        stack<int> help;
        int n=size(head);
        for(int i=0; i<n/2 ; ++i){
            help.push(head->val);
            head=head->next;
        }
        if(n%2!=0){
            head=head->next;
        }
        while(head){
            if(head->val != help.top()){
                return false;
            }
            help.pop();
            head=head->next;
        }
        return true;
    }

    int size(ListNode* head){
        if(!head){
            return 0;
        }
        return size(head->next)+1;
    }
};
