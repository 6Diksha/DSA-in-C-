## Middle of the Linked List



/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    ListNode* middleNode(ListNode* head) {
        if(head==NULL || head->next==NULL){
            return head;
        }
        ListNode* slow=head;
        ListNode* fast=head;
        while(fast){
            fast=fast->next;
            if(fast){
                slow=slow->next;
                fast=fast->next;
            }
        }
        return slow;
    }
};




/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    ListNode* middleNode(ListNode* head) {
        ListNode *slow= head;
        ListNode *fast= head;
        while(fast!=NULL && fast->next !=NULL && fast->next->next !=NULL){
            fast=fast->next->next;
            slow=slow->next;
        }
        if(fast->next !=NULL){
            return slow->next;
        }
        return slow;
    }
};
